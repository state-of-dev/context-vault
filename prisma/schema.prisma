// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "windows"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  username      String?   @unique
  isPremium     Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  prompts       Prompt[]
  collections   Collection[]
  activities    UserActivity[]
  subscriptions Subscription[]
  favorites     Favorite[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Category {
  id          String @id @default(cuid())
  name        String @unique
  emoji       String
  description String
  promptCount Int    @default(0)

  subcategories Subcategory[]
  prompts       Prompt[]

  @@map("categories")
}

model Subcategory {
  id          String @id @default(cuid())
  name        String
  categoryId  String
  description String
  promptCount Int    @default(0)

  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  prompts  Prompt[]

  @@unique([name, categoryId])
  @@map("subcategories")
}

model AITool {
  id          String  @id @default(cuid())
  name        String  @unique
  type        String
  description String
  website     String?
  isActive    Boolean @default(true)

  prompts Prompt[]

  @@map("ai_tools")
}

model Prompt {
  id            String   @id @default(cuid())
  title         String
  description   String
  content       String
  preview       String
  categoryId    String
  subcategoryId String
  aiToolId      String
  authorId      String
  isPublic      Boolean  @default(true)
  isPremium     Boolean  @default(false)
  price         Float?
  tags          String[]
  likes         Int      @default(0)
  copies        Int      @default(0)
  views         Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  category    Category    @relation(fields: [categoryId], references: [id])
  subcategory Subcategory @relation(fields: [subcategoryId], references: [id])
  aiTool      AITool      @relation(fields: [aiToolId], references: [id])
  author      User        @relation(fields: [authorId], references: [id])

  activities          UserActivity[]
  collectionPrompts   CollectionPrompt[]
  favorites           Favorite[]

  @@map("prompts")
}

model Collection {
  id          String   @id @default(cuid())
  name        String
  description String
  authorId    String
  isPremium   Boolean  @default(false)
  price       Float?
  isPublic    Boolean  @default(true)
  tags        String[]
  subscribers Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  author            User                @relation(fields: [authorId], references: [id])
  collectionPrompts CollectionPrompt[]
  subscriptions     Subscription[]

  @@map("collections")
}

model CollectionPrompt {
  id           String @id @default(cuid())
  collectionId String
  promptId     String
  order        Int    @default(0)

  collection Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  prompt     Prompt     @relation(fields: [promptId], references: [id], onDelete: Cascade)

  @@unique([collectionId, promptId])
  @@map("collection_prompts")
}

model UserActivity {
  id        String   @id @default(cuid())
  userId    String
  promptId  String
  type      String
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  prompt Prompt @relation(fields: [promptId], references: [id], onDelete: Cascade)

  @@map("user_activities")
}

model Subscription {
  id           String    @id @default(cuid())
  userId       String
  collectionId String?
  authorId     String?
  type         String
  status       String
  price        Float
  startDate    DateTime  @default(now())
  endDate      DateTime?

  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  collection Collection? @relation(fields: [collectionId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  promptId  String
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  prompt Prompt @relation(fields: [promptId], references: [id], onDelete: Cascade)

  @@unique([userId, promptId])
  @@map("favorites")
}
